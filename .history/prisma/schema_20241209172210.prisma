// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    email    String   @unique
    login    String   @unique
    name     String
    password String
    role     Role     @default(USER) // Поле для роли пользователя
    Basket   Basket[]
    Order    Order[]
}

enum Role {
    USER
    ADMIN
}

model Category {
    id          Int           @id @default(autoincrement())
    title       String
    img         String[]
    products    Product[]
    SubCategory SubCategory[]
    createdAt   DateTime      @default(now()) @map("created_at")
    updatedAt   DateTime      @updatedAt @map("updated_at")
}

model SubCategory {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    title      String
    product    Product[]
    Category   Category  @relation(fields: [categoryId], references: [id])
    categoryId Int
}

model BusinessSolution {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    name         String
    price        Int
    img          String[]
    availability Boolean
    product      Product[]
}

model Product {
    id                 Int               @id @default(autoincrement())
    name               String
    price              Float
    description        String?
    img                String[]
    Category           Category          @relation(fields: [categoryId], references: [id])
    categoryId         Int
    SubCategory        SubCategory?      @relation(fields: [subCategoryId], references: [id])
    subCategoryId      Int?
    BusinessSolution   BusinessSolution? @relation(fields: [businessSolutionId], references: [id])
    businessSolutionId Int?
    BasketItem         BasketItem[]
    OrderItem          OrderItem[]
    createdAt          DateTime          @default(now()) @map("created_at")
    updatedAt          DateTime          @updatedAt @map("updated_at")

    // связь с характеристиками
    characteristics ProductCharacteristic[]
}

model ProductCharacteristic {
    id        Int    @id @default(autoincrement())
    productId Int // Ссылка на продукт
    name      String // Название характеристики (например, "Мощность", "Размер")
    value     String // Значение характеристики (например, "9.5 кВт", "840x840x775 мм")

    product Product @relation(fields: [productId], references: [id])
}

model News {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    title       String
    date        String
    img         String[]
    description String   @db.Text
}

model Basket {
    id          Int          @id @default(autoincrement())
    userId      Int          @unique
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    User        User         @relation(fields: [userId], references: [id])
    basketItems BasketItem[]
}

model BasketItem {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    Basket   Basket? @relation(fields: [basketId], references: [id])
    basketId Int?

    productId Int
    product   Product @relation(fields: [productId], references: [id])

    quantity Int
    price    Int
}

// model Order {
//     id        Int      @id @default(autoincrement())
//     createdAt DateTime @default(now()) @map("created_at")
//     updatedAt DateTime @updatedAt @map("updated_at")

//     user   User @relation(fields: [userId], references: [id])
//     userId Int

//     orderItems OrderItem[]
//     adress     String
//     total      Int
//     // status     OrderStatus @default(NEW)
// }

model Order {
    id            Int         @id @default(autoincrement())
    createdAt     DateTime    @default(now()) @map("created_at")
    updatedAt     DateTime    @updatedAt @map("updated_at")
    userId        Int
    user          User        @relation(fields: [userId], references: [id])
    total         Int
    adress        String
    paymentMethod String
    email         String
    phone         String
    name          String
    orderItems    OrderItem[]
}

model OrderItem {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    Order   Order? @relation(fields: [orderId], references: [id])
    orderId Int?

    product   Product @relation(fields: [productId], references: [id])
    productId Int

    quantity Int
    price    Int
}

model FeedBack {
    userId
}

// enum OrderStatus {
//     NEW
//     PAID
//     SHIPPED
//     COMPLETED
//     CANCELED
// }
